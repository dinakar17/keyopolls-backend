# Gateway Time Out Error

services:
  # Traefik reverse proxy
  traefik:
    image: traefik:latest
    restart: unless-stopped
    command:
      - "--api.dashboard=true" # Enable the dashboard
      - "--api.insecure=true" # Access without auth (dev only!)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"

  # PostgreSQL Database (using external/local database)
  # Commented out since we're using external database
  # db:
  #   image: postgres:14
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   environment:
  #     - POSTGRES_DB=keyoconnect
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=12345
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d keyoconnect"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
  #   networks:
  #     - backend-network

  # Redis for caching and Celery broker (conditional)
  redis:
    image: redis:latest
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    profiles:
      - redis

  # Django ASGI web application
  web:
    # Build the Django application image using the Dockerfile in the current directory
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 early_access_api.asgi:application"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
      - .:/app # Mount code for development
    ports:
      - "8000:8000" # Expose port for local development
    env_file:
      - .env
    depends_on:
      # Removed db dependency since using external database
      - traefik
    restart: unless-stopped
    networks:
      - traefik-network
      - backend-network
    labels:
      - "traefik.enable=true"
      # override the default docker network to use for connections to this service
      - "traefik.docker.network=traefik-network"
      - "traefik.http.routers.web.rule=Host(`django.localhost`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.services.web.loadbalancer.server.port=8000"

  # Celery worker (conditional)
  celery:
    build: .
    command: celery -A early_access_api worker -l info
    volumes:
      - logs_volume:/app/logs
      - .:/app # Mount code for development
    env_file:
      - .env
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    profiles:
      - redis

  # Celery beat for scheduled tasks (conditional)
  celery-beat:
    build: .
    command: celery -A early_access_api beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - logs_volume:/app/logs
      - .:/app # Mount code for development
    env_file:
      - .env
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      # This is just a reference
      # Actual network is created in the networks section
      - backend-network
    profiles:
      - redis

networks:
  traefik-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume: