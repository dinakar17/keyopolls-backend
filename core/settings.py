"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import json
import logging
import logging.config
import os
import tempfile
from pathlib import Path

import dj_database_url
import yaml
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-oxp$a#*hmqmqlk!!9xf3jl@204k6p)d1om8ih9a7bcm4@p=!!z"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)
USE_REDIS = config("USE_REDIS", default=False, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "corsheaders",
    "ninja",
    # Local apps
    # "comments",
    # "notifications",
    # "polls",
    # "communities",
]

MIDDLEWARE = [
    # CORS Middleware
    "corsheaders.middleware.CorsMiddleware",
    # Django Middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.parse(
        config("DATABASE_URL", default="sqlite:///db.sqlite3"),
    )
}

# Configure connection settings
DATABASES["default"]["ATOMIC_REQUESTS"] = True
DATABASES["default"]["CONN_MAX_AGE"] = config("CONN_MAX_AGE", default=60, cast=int)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# UPDATED: Cache configuration with Redis URL
if USE_REDIS:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": config("REDIS_URL", default="redis://redis:6379/1"),
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }

# Session settings - using cache for session storage
if USE_REDIS:
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
else:
    SESSION_ENGINE = "django.contrib.sessions.backends.db"

# UPDATED: Celery settings with Redis URL
if USE_REDIS:
    CELERY_BROKER_URL = config("REDIS_URL", default="redis://redis:6379/0")
    CELERY_RESULT_BACKEND = "django-db"
else:
    # Use database as broker when Redis is not available
    CELERY_BROKER_URL = "django:///"  # Use Django database as broker
    CELERY_RESULT_BACKEND = "django-db"

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Kolkata"

# Cache time to live in seconds
CACHE_TTL = 60 * 15  # 15 minutes

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# UPDATED: Static files configuration
STATIC_URL = config("STATIC_URL", default="/static/")
STATIC_ROOT = config("STATIC_ROOT", default=str(BASE_DIR / "staticfiles"))

# ADDED: Media files configuration
MEDIA_URL = config("MEDIA_URL", default="/media/")
MEDIA_ROOT = config("MEDIA_ROOT", default=str(BASE_DIR / "media"))

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Zoho ZeptoMail settings
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")
ZEPTOMAIL_API_KEY = config("ZEPTOMAIL_API_KEY")

# Twilio settings
TWILIO_ACCOUNT_SID = config("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = config("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = config("TWILIO_PHONE_NUMBER")

# MSG91 settings
MSG91_AUTH_KEY = config("MSG91_AUTH_KEY")
MSG91_TEMPLATE_ID = config("MSG91_TEMPLATE_ID")

FRONTEND_URL = config("FRONTEND_URL", default="http://localhost:3000")

# AWS S3 settings
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
AWS_S3_FILE_OVERWRITE = False

# Authentication keys
MEMBER_LOGIN_KEY = config("MEMBER_LOGIN_KEY")
MERCHANT_LOGIN_KEY = config("MERCHANT_LOGIN_KEY")
MERCHANT_OWNER_LOGIN_KEY = config("MERCHANT_OWNER_LOGIN_KEY")

PUBLIC_SECRET_KEY = config("PUBLIC_SECRET_KEY")
ANONYMOUS_SECRET_KEY = config("ANONYMOUS_SECRET_KEY")

# Cashfree settings
CASHFREE_CLIENT_ID = config("CASHFREE_CLIENT_ID")
CASHFREE_CLIENT_SECRET = config("CASHFREE_CLIENT_SECRET")
CASHFREE_PUBLIC_KEY = config("CASHFREE_PUBLIC_KEY")

# Firebase configuration
FCM_CREDENTIALS_JSON = config("FCM_CREDENTIALS", default=None)
FCM_CREDENTIALS_PATH = "firebase-credentials.json"

if FCM_CREDENTIALS_JSON:
    # Parse the JSON string from environment
    try:
        # Option 1: Use the parsed dictionary directly
        FIREBASE_CREDENTIALS = json.loads(FCM_CREDENTIALS_JSON)

        # Option 2: Create a temporary file for libraries that need a path
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".json")
        temp_file.write(FCM_CREDENTIALS_JSON.encode("utf-8"))
        temp_file.close()
        FCM_CREDENTIALS_PATH = temp_file.name
    except json.JSONDecodeError:
        print("Invalid JSON string provided for FCM_CREDENTIALS")
        # If it's not a valid JSON string, assume it's a file path
        FCM_CREDENTIALS_PATH = FCM_CREDENTIALS_JSON
else:
    # For local development, use a file path (not in the repository)
    FCM_CREDENTIALS_PATH = config(
        "FCM_CREDENTIALS_PATH",
        default=os.path.join(BASE_DIR, "firebase-credentials.json"),
    )

# UPDATED: Environment detection
ENVIRONMENT = "production" if not DEBUG else "development"

# GeoIP2 Configuration
GEOIP_PATH = os.path.join(BASE_DIR, "geoip")

# Configure to use only the Country database
GEOIP_COUNTRY = "GeoLite2-Country.mmdb"


def setup_logging():
    """Load logging configuration from YAML file"""
    logging_config_path = BASE_DIR / "logging.yaml"

    if logging_config_path.exists():
        with open(logging_config_path, "r") as f:
            yaml_config = yaml.safe_load(f)

        # Create logs directory if it doesn't exist
        logs_dir = BASE_DIR / "logs"
        logs_dir.mkdir(exist_ok=True)

        # Adjust logging levels based on environment
        if ENVIRONMENT == "production":
            # In production, reduce verbosity
            yaml_config["loggers"]["django.db.backends"]["level"] = "ERROR"
            yaml_config["handlers"]["console"]["level"] = "INFO"

            # Disable debug file handler in production
            for logger_name, logger_config in yaml_config["loggers"].items():
                if "file_debug" in logger_config.get("handlers", []):
                    logger_config["handlers"].remove("file_debug")

        elif ENVIRONMENT == "development":
            # In development, enable SQL query logging
            yaml_config["loggers"]["django.db.backends"]["level"] = "DEBUG"
            yaml_config["handlers"]["console"]["level"] = "DEBUG"

        # Apply the configuration
        logging.config.dictConfig(yaml_config)

        # NOW logging is configured, so these will work
        logger = logging.getLogger(__name__)
        logger.info(f"Logging configured for {ENVIRONMENT} environment")

        # Test your config values AFTER logging is set up (only in debug mode)
        if DEBUG:
            logger.debug(f"DATABASE_URL: {config('DATABASE_URL')}")
            logger.debug(f"CORS_ALLOWED_ORIGINS: {config('CORS_ALLOWED_ORIGINS')}")

    else:
        # Fallback to basic logging if YAML file doesn't exist
        logging.basicConfig(
            level=logging.DEBUG if DEBUG else logging.INFO,
            format="%(levelname)s %(asctime)s %(name)s %(message)s",
        )
        print(f"Warning: logging.yaml not found at {logging_config_path}")


def test_logging():
    """Simple function to test if logging is working"""
    if DEBUG:  # Only test in development
        print("Testing logging configuration...")
        logger = logging.getLogger("early_access_api")
        logger.debug("Basic Python logging DEBUG test")
        logger.info("Basic Python logging INFO test")


# Call the setup function
setup_logging()


USE_ASYNC_NOTIFICATIONS = config("USE_ASYNC_NOTIFICATIONS", default=False, cast=bool)

# Test logging configuration (only in development)
if DEBUG:
    test_logging()
