# Generated by Django 5.2.3 on 2025-06-30 14:30

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("comments", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("polls", "0001_initial"),
        ("profile", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommentFollow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "auto_followed",
                    models.BooleanField(
                        default=True,
                        help_text="True if auto-followed by interaction, False if manually followed",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="followers",
                        to="comments.genericcomment",
                    ),
                ),
                (
                    "follower",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_follows",
                        to="profile.pseudonymousprofile",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["comment", "is_active"],
                        name="notificatio_comment_232812_idx",
                    ),
                    models.Index(
                        fields=["follower", "-created_at"],
                        name="notificatio_followe_1cea97_idx",
                    ),
                ],
                "unique_together": {("follower", "comment")},
            },
        ),
        migrations.CreateModel(
            name="FCMDevice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.TextField(unique=True)),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("android", "Android"),
                            ("ios", "iOS"),
                            ("web", "Web"),
                        ],
                        max_length=10,
                    ),
                ),
                ("device_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "device_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fcm_devices",
                        to="profile.pseudonymousprofile",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["profile", "active"],
                        name="notificatio_profile_f4fc14_idx",
                    ),
                    models.Index(fields=["token"], name="notificatio_token_c0e5cd_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("poll_comment", "Poll Comment"),
                            ("poll_vote", "Poll Vote"),
                            ("reply", "Reply"),
                            ("follow", "Follow"),
                            ("mention", "Mention"),
                            ("community_invite", "Community Invite"),
                            ("community_new_poll", "Community New Poll"),
                            ("community_role_change", "Community Role Change"),
                            ("followed_user_poll", "Followed User Poll"),
                            ("followed_poll_comment", "Followed Poll Comment"),
                            ("followed_comment_reply", "Followed Comment Reply"),
                            ("vote_milestone", "Vote Milestone"),
                            ("like_milestone", "Like Milestone"),
                            ("share_milestone", "Share Milestone"),
                            ("bookmark_milestone", "Bookmark Milestone"),
                            ("view_milestone", "View Milestone"),
                            ("follower_milestone", "Follower Milestone"),
                            ("replies_milestone", "Replies Milestone"),
                            ("verification", "Verification"),
                            ("welcome", "Welcome"),
                            ("system", "System"),
                        ],
                        default="system",
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("message", models.TextField()),
                (
                    "click_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to redirect when notification is clicked",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "deep_link_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data for mobile app deep linking (screen, params, etc.)",
                    ),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data like milestone numbers, custom params, etc.",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_clicked", models.BooleanField(default=False)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                ("push_sent", models.BooleanField(default=False)),
                ("push_sent_at", models.DateTimeField(blank=True, null=True)),
                ("email_sent", models.BooleanField(default=False)),
                ("email_sent_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications_sent",
                        to="profile.pseudonymousprofile",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications_received",
                        to="profile.pseudonymousprofile",
                    ),
                ),
                (
                    "target_content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications_about",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["recipient", "-created_at"],
                        name="notificatio_recipie_a972ce_idx",
                    ),
                    models.Index(
                        fields=["notification_type", "-created_at"],
                        name="notificatio_notific_d8746a_idx",
                    ),
                    models.Index(
                        fields=["is_read", "-created_at"],
                        name="notificatio_is_read_1cb71a_idx",
                    ),
                    models.Index(
                        fields=["actor", "-created_at"],
                        name="notificatio_actor_i_e39f54_idx",
                    ),
                    models.Index(
                        fields=["target_content_type", "target_object_id"],
                        name="notificatio_target__dfbaf5_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("poll_comment", "Poll Comment"),
                            ("poll_vote", "Poll Vote"),
                            ("reply", "Reply"),
                            ("follow", "Follow"),
                            ("mention", "Mention"),
                            ("community_invite", "Community Invite"),
                            ("community_new_poll", "Community New Poll"),
                            ("community_role_change", "Community Role Change"),
                            ("followed_user_poll", "Followed User Poll"),
                            ("followed_poll_comment", "Followed Poll Comment"),
                            ("followed_comment_reply", "Followed Comment Reply"),
                            ("vote_milestone", "Vote Milestone"),
                            ("like_milestone", "Like Milestone"),
                            ("share_milestone", "Share Milestone"),
                            ("bookmark_milestone", "Bookmark Milestone"),
                            ("view_milestone", "View Milestone"),
                            ("follower_milestone", "Follower Milestone"),
                            ("replies_milestone", "Replies Milestone"),
                            ("verification", "Verification"),
                            ("welcome", "Welcome"),
                            ("system", "System"),
                        ],
                        max_length=50,
                    ),
                ),
                ("in_app_enabled", models.BooleanField(default=True)),
                ("push_enabled", models.BooleanField(default=False)),
                ("email_enabled", models.BooleanField(default=True)),
                ("is_enabled", models.BooleanField(default=True)),
                (
                    "custom_thresholds",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Custom milestone numbers [1, 10, 100, 500, 1000]",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to="profile.pseudonymousprofile",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["profile", "notification_type"],
                        name="notificatio_profile_038be1_idx",
                    ),
                    models.Index(
                        fields=["notification_type"],
                        name="notificatio_notific_1fb707_idx",
                    ),
                ],
                "unique_together": {("profile", "notification_type")},
            },
        ),
        migrations.CreateModel(
            name="PollFollow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "auto_followed",
                    models.BooleanField(
                        default=True,
                        help_text="True if auto-followed by interaction, False if manually followed",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "follower",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_follows",
                        to="profile.pseudonymousprofile",
                    ),
                ),
                (
                    "poll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="followers",
                        to="polls.poll",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["poll", "is_active"],
                        name="notificatio_poll_id_7bcee1_idx",
                    ),
                    models.Index(
                        fields=["follower", "-created_at"],
                        name="notificatio_followe_96e7e7_idx",
                    ),
                ],
                "unique_together": {("follower", "poll")},
            },
        ),
        migrations.CreateModel(
            name="ProfileFollow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "follower",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="following",
                        to="profile.pseudonymousprofile",
                    ),
                ),
                (
                    "following",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="followers",
                        to="profile.pseudonymousprofile",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["follower", "is_active"],
                        name="notificatio_followe_7f5262_idx",
                    ),
                    models.Index(
                        fields=["following", "is_active"],
                        name="notificatio_followi_4962a2_idx",
                    ),
                    models.Index(
                        fields=["-created_at"], name="notificatio_created_961e59_idx"
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("follower", models.F("following")), _negated=True
                        ),
                        name="no_self_follow",
                    )
                ],
                "unique_together": {("follower", "following")},
            },
        ),
    ]
